
//*** package ***//
$ mvn clean package -Plocal

-- run on docker machine
##> mvn clean package -Plocal -f ./pom.xml ;wsl ./__tools.sh -p local -a deploy

//** **//
-- run in docker as sys SQLPLUS>
create user val_user identified by val_pass;

grant CREATE SESSION, ALTER SESSION, CREATE DATABASE LINK, -
  CREATE MATERIALIZED VIEW, CREATE PROCEDURE, CREATE PUBLIC SYNONYM, -
  CREATE ROLE, CREATE SEQUENCE, CREATE SYNONYM, CREATE TABLE, -
  CREATE TRIGGER, CREATE TYPE, CREATE VIEW, UNLIMITED TABLESPACE -
  to val_user;

-- run as val_user
DROP TABLE LOGS;

CREATE TABLE LOGS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY
    , TITLE VARCHAR2(120)
    , INFO VARCHAR2(1024)
    , DETAILS CLOB
    , INSERT_DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
commit;

CREATE OR REPLACE PROCEDURE FLOG (
    title_in IN VARCHAR2,
    info_in IN VARCHAR2 DEFAULT NULL,
    details_in IN CLOB DEFAULT NULL
) AS
BEGIN
    INSERT INTO LOGS(TITLE, INFO, DETAILS) VALUES(title_in, info_in, details_in);

END;
/
commit;

//+++ CREATE/REPLACE PACKAGE +++//

CREATE OR REPLACE PACKAGE VN_PEGA_INTEGRATION_API AS
  -- Declare your package-level variables, types, and constants here (if any)

  -- Declare your package functions
  FUNCTION COMPONENT_GET_JSON_DATA(p1 Clob) RETURN varchar;
  FUNCTION COMPONENT_SEND_JSON_DATA(p1 Int, p2 VARCHAR) RETURN Clob;
  FUNCTION PROPERTY_GET_JSON_DATA(p1 Clob) RETURN varchar;
  FUNCTION SUBURB_DISTRICT_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION SUBURB_STREET_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION APPORTIONMENT_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION DEALING_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION SUPPLEMENTRY_VAL_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION CANCEL_SUPP_VAL_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION REMOVE_PROPERTY_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION INFORMATION_KIT_GET_JSON_DATA(p1 Clob) RETURN Clob;
  FUNCTION FUNC_PLACEHOLDER(p1 Clob) RETURN Clob;

  -- Declare other package elements as needed
END VN_PEGA_INTEGRATION_API;
/


CREATE OR REPLACE PACKAGE BODY VN_PEGA_INTEGRATION_API AS
  -- Implement your package functions
  FUNCTION COMPONENT_GET_JSON_DATA(p1 Clob) RETURN varchar IS
    -- Function logic goes here
    -- You can use PL/SQL statements, variables, and other constructs
	pragma autonomous_transaction;
  BEGIN
    -- Your implementation code
    flog('FUNCTION CALL','COMPONENT_GET_JSON_DATA',p1);
    COMMIT;
    RETURN 'SUCCESS';
  END COMPONENT_GET_JSON_DATA;

-- Implement your package functions
  FUNCTION PROPERTY_GET_JSON_DATA(p1 Clob) RETURN varchar IS
    -- Function logic goes here
    -- You can use PL/SQL statements, variables, and other constructs
	pragma autonomous_transaction;
  BEGIN
    -- Your implementation code
    flog('FUNCTION CALL','PROPERTY_GET_JSON_DATA',p1);
    COMMIT;
    RETURN 'SUCCESS';
  END PROPERTY_GET_JSON_DATA;

  FUNCTION COMPONENT_SEND_JSON_DATA(p1 Int, p2 VARCHAR) RETURN Clob IS
    -- Function logic goes here
    -- You can use PL/SQL statements, variables, and other constructs
	pragma autonomous_transaction;
  BEGIN
    -- Your implementation code
    flog('FUNCTION CALL','COMPONENT_SEND_JSON_DATA',to_char(p1,'99999')||':'||p2);
    COMMIT;
    RETURN '{"comp_id":100,"comp_code":"","comp_desc":"","district_code":"","zone_code":""}';
  END COMPONENT_SEND_JSON_DATA;

  FUNCTION SUBURB_DISTRICT_GET_JSON_DATA(p1 Clob) RETURN Clob IS
    -- Function logic goes here
    -- You can use PL/SQL statements, variables, and other constructs
    pragma autonomous_transaction;
  BEGIN
    -- Your implementation code
    flog('FUNCTION CALL','SUBURB_DISTRICT_GET_JSON_DATA',p1);
    COMMIT;
    RETURN 'SUCCESS';
  END SUBURB_DISTRICT_GET_JSON_DATA;

  FUNCTION SUBURB_STREET_GET_JSON_DATA(p1 Clob) RETURN Clob IS
      -- Function logic goes here
      -- You can use PL/SQL statements, variables, and other constructs
      pragma autonomous_transaction;
    BEGIN
      -- Your implementation code
      flog('FUNCTION CALL','SUBURB_STREET_GET_JSON_DATA',p1);
      COMMIT;
      RETURN 'SUCCESS';
    END SUBURB_STREET_GET_JSON_DATA;

    FUNCTION APPORTIONMENT_GET_JSON_DATA(p1 Clob) RETURN Clob IS
        -- Function logic goes here
        -- You can use PL/SQL statements, variables, and other constructs
        pragma autonomous_transaction;
      BEGIN
        -- Your implementation code
        flog('FUNCTION CALL','APPORTIONMENT_GET_JSON_DATA',p1);
        COMMIT;
        RETURN 'SUCCESS';
      END APPORTIONMENT_GET_JSON_DATA;

    FUNCTION DEALING_GET_JSON_DATA(p1 Clob) RETURN Clob IS
        -- Function logic goes here
        -- You can use PL/SQL statements, variables, and other constructs
        pragma autonomous_transaction;
      BEGIN
        -- Your implementation code
        flog('FUNCTION CALL','DEALING_GET_JSON_DATA',p1);
        COMMIT;
        RETURN 'SUCCESS';
      END DEALING_GET_JSON_DATA;

    FUNCTION SUPPLEMENTRY_VAL_GET_JSON_DATA(p1 Clob) RETURN Clob IS
        -- Function logic goes here
        -- You can use PL/SQL statements, variables, and other constructs
        pragma autonomous_transaction;
      BEGIN
        -- Your implementation code
        flog('FUNCTION CALL','SUPPLEMENTRY_VAL_GET_JSON_DATA',p1);
        COMMIT;
        RETURN 'SUCCESS';
      END SUPPLEMENTRY_VAL_GET_JSON_DATA;
  
    FUNCTION CANCEL_SUPP_VAL_GET_JSON_DATA(p1 Clob) RETURN Clob IS
        -- Function logic goes here
        -- You can use PL/SQL statements, variables, and other constructs
        pragma autonomous_transaction;
      BEGIN
        -- Your implementation code
        flog('FUNCTION CALL','CANCEL_SUPP_VAL_GET_JSON_DATA',p1);
        COMMIT;
        RETURN 'SUCCESS';
      END CANCEL_SUPP_VAL_GET_JSON_DATA;

    FUNCTION REMOVE_PROPERTY_GET_JSON_DATA(p1 Clob) RETURN Clob IS
        -- Function logic goes here
        -- You can use PL/SQL statements, variables, and other constructs
        pragma autonomous_transaction;
      BEGIN
        -- Your implementation code
        flog('FUNCTION CALL','REMOVE_PROPERTY_GET_JSON_DATA',p1);
        COMMIT;
        RETURN 'SUCCESS';
      END REMOVE_PROPERTY_GET_JSON_DATA;

    FUNCTION INFORMATION_KIT_GET_JSON_DATA(p1 Clob) RETURN Clob IS
        -- Function logic goes here
        -- You can use PL/SQL statements, variables, and other constructs
        pragma autonomous_transaction;
      BEGIN
        -- Your implementation code
        flog('FUNCTION CALL','INFORMATION_KIT_GET_JSON_DATA',p1);
        COMMIT;
        RETURN 'SUCCESS';
      END INFORMATION_KIT_GET_JSON_DATA;

    FUNCTION FUNC_PLACEHOLDER(p1 Clob) RETURN Clob IS
        -- Function logic goes here
        -- You can use PL/SQL statements, variables, and other constructs
        pragma autonomous_transaction;
      BEGIN
        -- Your implementation code
        flog('FUNCTION CALL','FUNC_PLACEHOLDER',p1);
        COMMIT;
        RETURN 'SUCCESS';
      END FUNC_PLACEHOLDER;

    -- Implement other package elements as needed
END VN_PEGA_INTEGRATION_API;
/

//+++ CREATE/REPLACE PACKAGE +++//

//======================================//
TESTS + DEBUG
//======================================//
SET SERVEROUTPUT ON;

declare
    v_rtn varchar2(32000);
begin

v_rtn := COMPONENT_GET_JSON_DATA('{
        "comp_id": 31521,
        "comp_code": "EL",
        "comp_desc": "ENGLOBO",
        "district_code": "1",
        "zone_code": "A",
        "ltt_category": "RES",
        "non_homogenous_ind": "Y",
        "comp_review_date": "2023/12/25 10:12:50",
        "auto_batch_exclude": "",
        "action": "CREATE",
        "action_ts": "2023/12/25 10:12:50",
        "action_by": "AAGLODIYA",
        "properties": [{"propcomp_id":4342746,
        "prop_id":508547},
        {"propcomp_id" : 7533487,
        "prop_id" : 508548}]
    }');
dbms_output.put_line('Return :' || v_rtn);
end;

=== SYNC APIS ===
VALIQ ==> VALNET
    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1839071277/Land+Value
    property update             /valsync/property/update

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1838972960/Supplementary+Valuation
    supplementary valuation     /valsync/property/suppval/update

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/2012545025/Suburb+Street
    suburb street               /valsync/suburb/street/update

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/2012545042/Suburb+District
    suburb district             /valsync/suburb/district/update

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1839202358/Dealings
    dealings                    /valsync/dealing/update

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/2002911233/Apportionment+Sync+up
    apportionment sync up       /valsync/apportionment/update

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1839104080/Component+Sync+up+R2
    component sync up(R2)       TBD

VALNET ==> VALIQ
    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1838972960/Supplementary+Valuation
    supplementary valuation     /valsync/pega/supplementary/valuation

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1839202384/Related+Property
    related property            /valsync/pega/property/related

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1839071277/Land+Value
    land value                  /valsync/pega/property/landvalue

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1999667204/District+Base+Date
    district base date          /valsync/pega/district/basedate

    https://spadev.atlassian.net/wiki/spaces/VIAAD/pages/1839104080/Component+Sync+up+R2
    component sync up(R2)       TBD